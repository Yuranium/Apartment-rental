scalar Date

type Query
{
    users: [User!]
    userById(id: ID!): User
    roles: [Role!]
    roleById(id: ID!): Role
    apartments: [Apartment!]
    apartmentById(id: ID!): Apartment
    allPaymentsByUserId(userId: ID!): [Payment!]
    paymentById(userId: ID!, paymentId: ID!): Payment
    services: [Service!]
    serviceById(id: ID!): Service
}

type User
{
    id: ID!
    name: String!
    email: String!
    dateRegistration: String
    active: Boolean
    roles: [Role!]!
}

type Role
{
    roleType: RoleType!
    assignmentDate: String!
}

enum RoleType
{
    ROLE_GUEST
    ROLE_USER
    ROLE_OWNER
    ROLE_ADMIN
}

type Apartment
{
    name: String!
    square: Float!
    roomCount: Int!
    dailyPrice: Float!
    type: ApartmentType!
    address: String!
    roomAvailable: Boolean
    user: User!
    services: [Service!]!
}

enum ApartmentType
{
    FLAT
    HOTEL
    HOUSE
    OFFICE
}

type Payment
{
    amountPayment: Float!
    datePayment: Date!
    status: PaymentStatus!
}

enum PaymentStatus
{
    NOT_PAID
    PAID
    OVERDUE
}

type Service
{
    name: String!
    description: String!
    servicePrice: Float!
}